#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

from __future__ import division

import argparse
import os
from os.path import join
from itertools import izip, chain, repeat
from collections import OrderedDict

import numpy
from matplotlib.mlab import griddata
from matplotlib import cm
from matplotlib.colorbar import make_axes, Colorbar
from matplotlib.ticker import ScalarFormatter

from crumbs.vcf.statistics import VcfStats, WINDOWS_SIZE
from crumbs.vcf.snv import (HET, HOM, HOM_ALT, HOM_REF,
                            DEF_MIN_CALLS_FOR_POP_STATS)
from crumbs.plot import (draw_histogram_in_fhand, draw_histograms, LINE,
                         get_fig_and_canvas, draw_int_boxplot,
                         draw_histogram_in_axes, BAR)

PLOTS_PER_CHART = 3


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Filter the snvs in an indexed vcf'
    parser = argparse.ArgumentParser(description=description)
    in_help = 'Indexed vcf file'
    parser.add_argument('input', help=in_help, type=argparse.FileType('rt'))
    parser.add_argument('-o', '--out_dir', default=os.getcwd(),
                        help='Directory to write all output files')
    msq_qual = 'Genotype quelity threshold to take into account a genotype'
    parser.add_argument('-q', '--gt_qual_threshold', default=0.0, type=float,
                        help=msq_qual)
    msg_samples = 'Min num. called samples to calculate heterocigosity by snv'
    parser.add_argument('-s', '--min_samples', default=6, type=int,
                        help=msg_samples)
    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input
    args['out_dir'] = parsed_args.out_dir
    args['gq'] = parsed_args.gt_qual_threshold
    args['min_samples'] = parsed_args.min_samples
    if not os.path.exists(args['out_dir']):
        os.mkdir(os.path.abspath(args['out_dir']))
    return args


def draw_snv_densities(vcf_stats, out_dir):
    fhand = open(join(out_dir, 'snv_densities_distrib.png'), 'w')
    density_counter = vcf_stats.snv_density
    distrib = density_counter.calculate_distribution()
    xlabel = 'Num. of snvs in a {} pb window'
    draw_histogram_in_fhand(distrib['counts'], distrib['bin_limits'],
                            title='SNV densities distribution',
                            xlabel=xlabel.format(WINDOWS_SIZE * 2),
                            ylabel='Num. SNVs', fhand=fhand)


def draw_mafs(vcf_stats, out_dir, maf_kind):
    names = {'mafs_dp': 'MAF (depth based)',
             'mafs': 'MAF (genotype based)',
             'macs': 'MAC (genotype based)'}
    name = names[maf_kind]
    fbases = {'mafs_dp': 'maf_dp_',
              'mafs': 'maf_gt_',
              'macs': 'mac_gt_'}
    xlabels = {'mafs_dp': 'MAF (depth based) x 100',
               'mafs': 'Major Allele Freq. x 100',
               'macs': 'MAC (chroms. sampled - major allele count)'}

    maf_method = getattr(vcf_stats, maf_kind)
    xlabel = xlabels[maf_kind]
    ylabel = 'Num. SNVs'
    if maf_kind == 'mafs_dp':
        fhand = open(join(out_dir, fbases[maf_kind] + 'samples.png'), 'w')
        counters = []
        distrib_labels = []
        for sample in vcf_stats.samples:
            counters.append(maf_method(sample=sample))
            distrib_labels.append(sample)

        titles = [name + ' distribution'] * len(counters)
        draw_histograms(counters, distrib_labels=distrib_labels, fhand=fhand,
                        xlabel=xlabel, ylabel=ylabel, titles=titles)

    # all_together
    # Only draw graphs if there is data
    if len(vcf_stats.samples) > DEF_MIN_CALLS_FOR_POP_STATS:
        try:
            distrib = maf_method().calculate_distribution()
        except RuntimeError as error:
            assert str(error) == 'No items in IntCounter'
            distrib = {'counts': [], 'bin_limits': []}

        fhand = open(join(out_dir, fbases[maf_kind] + 'all_samples.png'), 'w')
        title = name + ' distribution. All samples'
        draw_histogram_in_fhand(distrib['counts'], distrib['bin_limits'],
                                title=title, xlabel=xlabel, ylabel=ylabel,
                                fhand=fhand, kind=LINE)


def draw_maf_and_mac(vcf_stats, out_dir):
    draw_mafs(vcf_stats, out_dir, maf_kind='mafs_dp')
    draw_mafs(vcf_stats, out_dir, maf_kind='mafs')
    draw_mafs(vcf_stats, out_dir, maf_kind='macs')


def grouper(n, iterable, padvalue=None):
    return izip(*[chain(iterable, repeat(padvalue, n - 1))] * n)


def draw_snv_depth(vcf_stats, out_dir):
    fhand = open(join(out_dir, 'snv_coverages_distrib.png'), 'w')
    distrib = vcf_stats.depths.calculate_distribution()
    counts = distrib['counts']
    bin_limits = distrib['bin_limits']
    title = 'Snv Coverage distribution'
    xlabel = 'Coverage'
    ylabel = 'Num. Snvs'
    draw_histogram_in_fhand(counts, bin_limits, title=title, xlabel=xlabel,
                            ylabel=ylabel, fhand=fhand, kind=LINE)


def draw_gt_depths(vcf_stats, out_dir, gq_threshold=None):
    gq_str = '_{}'.format(gq_threshold) if gq_threshold else ''
    fhand = open(join(out_dir, 'qt_depth_samples{}.png'.format(gq_str)), 'w')

    het_counters = []
    hom_counters = []
    samples = vcf_stats.samples

    for sample in samples:
        het_counter = vcf_stats.gt_depths(HET, sample=sample)
        hom_counter = vcf_stats.gt_depths(HOM, sample=sample)
        het_counters.append(het_counter)
        hom_counters.append(hom_counter)

    counters = []
    distrib_labels = []
    titles = []
    xlabel = 'GT depths'
    ylabel = 'Num. GTs'
    for het, hom, sample_names in zip(grouper(PLOTS_PER_CHART, het_counters),
                                      grouper(PLOTS_PER_CHART, hom_counters),
                                      grouper(PLOTS_PER_CHART, samples)):
        counters.extend(het)
        counters.extend(hom)
        distrib_labels.extend(sample_names)
        distrib_labels.extend(sample_names)
        titles.extend(['GT Depths distribution for Heterozigotes'] *
                      PLOTS_PER_CHART)
        titles.extend(['GT Depths distribution for Homozigotes'] *
                      PLOTS_PER_CHART)

    draw_histograms(counters, distrib_labels=distrib_labels, fhand=fhand,
                    xlabel=xlabel, plots_per_chart=PLOTS_PER_CHART,
                    ylabel=ylabel, titles=titles)

    # al samples
    fhand = open(join(out_dir, 'qt_depth_all_samples{}.png'.format(gq_str)),
                 'w')
    counters = [vcf_stats.gt_depths(HET)]
    counters.append(vcf_stats.gt_depths(HOM))
    distrib_labels = ['All samples', 'All samples']
    titles = ['GT Depths distribution for Heterozigotes',
              'GT Depths distribution for Homozigotes']

    draw_histograms(counters, distrib_labels=distrib_labels, fhand=fhand,
                    titles=titles, xlabel=xlabel, ylabel=ylabel,
                    plots_per_chart=1)


def draw_gt_quals(vcf_stats, out_dir, gq_threshold=None):
    gq_str = '_{}'.format(gq_threshold) if gq_threshold else ''
    fhand = open(join(out_dir, 'qt_qual_samples{}.png'.format(gq_str)), 'w')

    het_counters = []
    hom_counters = []
    samples = vcf_stats.samples

    for sample in samples:
        het_counters.append(vcf_stats.gt_quals(HET, sample=sample))
        hom_counters.append(vcf_stats.gt_quals(HOM, sample=sample))

    counters = []
    distrib_labels = []
    titles = []
    xlabel = 'GT quals'
    ylabel = 'Num. GTs'
    for het, hom, sample_names in zip(grouper(PLOTS_PER_CHART, het_counters),
                                      grouper(PLOTS_PER_CHART, hom_counters),
                                      grouper(PLOTS_PER_CHART, samples)):
        counters.extend(het)
        counters.extend(hom)
        distrib_labels.extend(sample_names)
        distrib_labels.extend(sample_names)
        titles.extend(['GT qual distribution for Heterozigotes'] *
                      PLOTS_PER_CHART)
        titles.extend(['GT qual distribution for Homozigotes'] *
                      PLOTS_PER_CHART)

    draw_histograms(counters, distrib_labels=distrib_labels, fhand=fhand,
                    xlabel=xlabel, plots_per_chart=PLOTS_PER_CHART,
                    ylabel=ylabel, titles=titles)

    # all samples
    fhand = open(join(out_dir, 'qt_qual_all_samples{}.png'.format(gq_str)),
                 'w')
    counters = [vcf_stats.gt_quals(HET)]
    counters.append(vcf_stats.gt_quals(HOM))
    distrib_labels = ['All samples', 'All samples']
    titles = ['GT Quals distribution for Heterozigotes',
              'GT Quals distribution for Homozigotes']

    draw_histograms(counters, distrib_labels=distrib_labels, fhand=fhand,
                    titles=titles, xlabel=xlabel, ylabel=ylabel,
                    plots_per_chart=1)


def draw_call_density(vcf_stats, out_dir, n_bins=100, rc_max=100,
                      ac_max=100):
    # rc_max = 10
    # ac_max = 10
    fhand = open(join(out_dir, 'gt_densities.png'), 'w')
    ac2d = vcf_stats.allelecount2d
    fig, canvas = get_fig_and_canvas(num_rows=3, figsize=(25, 25))
    xlabel = 'Reference_allele count'
    ylabel = 'Alternative allele count'
    desc_gt_type = {HET: ' Heterozigote', HOM_REF: 'Reference Homocigote',
                    HOM_ALT: 'Alternative homozigote'}
    for index, gt_type in enumerate((HOM_REF, HOM_ALT, HET)):
        axes = fig.add_subplot(3, 2, 2 * index + 1)
        title = 'Ref/alt allele count density in {}'
        title = title.format(desc_gt_type[gt_type])

        try:
            x, y, gt_counts = zip(*ac2d.get_gt_counts(gt_type, rc_max=rc_max,
                                                      ac_max=ac_max))
        except ValueError as error:
            if 'need more than 0 values to unpack' in error:
                x, y, gt_counts = None, None, None
            else:
                raise
        axes2 = fig.add_subplot(3, 2, 2 * index + 2)
        titl2 = 'Ref/alt gt quality average in {}'
        titl2 = titl2.format(desc_gt_type[gt_type])
        if x is None:
            title += ' (NO DATA)'
            axes.set_title(title)
            titl2 += ' (NO DATA)'
            axes2.set_title(title)
            continue

        kwargs = {'title': title, 'xlabel': xlabel, 'ylabel': ylabel,
                  'aspect': 'equal'}

        # gt_counts
        xi = numpy.linspace(0, rc_max, 100)
        yi = numpy.linspace(0, ac_max, 100)

        zi = griddata(x, y, gt_counts, xi, yi)

        cs = axes.contourf(xi, yi, zi)
        color_axes = make_axes(axes)[0]
        Colorbar(color_axes, cs)

        for key, value in kwargs.items():
            getattr(axes, 'set_{}'.format(key))(value)

        # qt_qual_avg
        kwargs = {'title': titl2, 'xlabel': xlabel, 'ylabel': ylabel,
                  'aspect': 'equal'}

        x, y, quals = zip(*ac2d.get_avg_gt_quals(gt_type, rc_max=rc_max,
                                                 ac_max=ac_max))
        zi = griddata(x, y, quals, xi, yi)
        cs = axes2.contourf(xi, yi, zi, **kwargs)
        color_axes = make_axes(axes2)[0]
        Colorbar(color_axes, cs)

        for key, value in kwargs.items():
            getattr(axes2, 'set_{}'.format(key))(value)

    canvas.print_figure(fhand)
    fhand.flush()


def draw_gt_hist_vs_allele_counts(vcf_stats, out_dir):
    fhand = open(join(out_dir, 'gt_type_counts_at_constant_coverage.png'), 'w')
    ac2d = vcf_stats.allelecount2d
    fig, canvas = get_fig_and_canvas(num_rows=3, figsize=(15, 30))

    coverages = vcf_stats.remarkable_depths
    colormap = cm.jet

    all_genotypes = ac2d.genotypes

    for index, coverage in enumerate(coverages):
        gt_bar_counts = OrderedDict()
        gt_quals = {}

        for gt_type in (HOM_REF, HET, HOM_ALT):
            for gt in all_genotypes[gt_type]:
                gt_bar_counts[gt] = {}
                gt_quals[gt] = {}

        for ref_count, genotype in ac2d.get_gt_depths_for_coverage(coverage):
            if ref_count not in gt_quals:
                gt_quals[ref_count] = {'num_gts': [], 'sum_gqs': []}
            for gt, counts in genotype.viewitems():
                gt_bar_counts[gt][ref_count] = counts['num_gt']
                mean_gt_qual = counts['sum_gq'] / counts['num_gt']
                gt_quals[ref_count]['num_gts'].append(counts['num_gt'])
                gt_quals[ref_count]['sum_gqs'].append(mean_gt_qual)

        axes = fig.add_subplot(len(coverages), 1, index + 1)
        # make room for the legend
        box = axes.get_position()
        box_shinkage = 0.9  # to make room for the legend
        axes.set_position([box.x0, box.y0, box.width * box_shinkage,
                           box.height])

        # add bars
        for gt_index, gt in enumerate(gt_bar_counts):
            lefts = list(range(coverage + 1))
            heights = [0] * (coverage + 1)
            bottoms = [0] * (coverage + 1)

            prev_bottoms = bottoms[:]
            for ref_count in range(coverage + 1):
                gt_count = gt_bar_counts.get(gt, {}).get(ref_count, None)
                if gt_count:
                    heights[ref_count] = gt_count
                    bottoms[ref_count] += gt_count
            if any(heights):
                axes.bar(lefts, heights, bottom=prev_bottoms,
                         label='/'.join(map(str, gt)),
                         color=colormap(1. * gt_index / len(gt_bar_counts)),
                         width=0.95)

        # add mean qualities
        xs, ys = [], []
        for ref_count in range(coverage + 1):
            num_gts = 0
            partial_gt_sum = 0
            if ref_count not in gt_quals:
                continue
            for index in range(len(gt_quals[ref_count]['num_gts'])):
                partial_gt_sum += (gt_quals[ref_count]['num_gts'][index] *
                                   gt_quals[ref_count]['sum_gqs'][index])
                num_gts += gt_quals[ref_count]['num_gts'][index]
            mean_qual = partial_gt_sum / num_gts
            # we add 0.5 to have the point in  the middle of the bar
            xs.append(ref_count + 0.5)
            ys.append(mean_qual)
        axes2 = axes.twinx()
        # make room for the legend
        box = axes2.get_position()
        axes2.set_position([box.x0, box.y0, box.width * box_shinkage,
                           box.height])
        axes2.plot(xs, ys, color='black', linewidth=2.0)
        axes2.set_ylabel('Mean Genotype Qual.')

        axes.legend(loc='center left', bbox_to_anchor=(1.1, 0.5))
        axes.set_xlim(right=coverage + 1)
        axes.set_ylabel('Num. genotypes')
        axes.set_title('Genotype Counts for Coverage %s' % str(coverage))
        axes.set_xlabel('Ref. Allele Count')

        # we add 0.5 to have the x ticks in  the middle of the bar
        xtick_spacing = coverage // 50 + 1
        xticks = [x + 0.5 for x in range(0, coverage + 1, xtick_spacing)]
        xticks_lables = [str(x) for x in range(0, coverage + 1, xtick_spacing)]
        axes.set_xticks(xticks)
        axes.set_xticklabels(xticks_lables)

    canvas.print_figure(fhand)
    fhand.flush()


def draw_quals_vs_depth(vcf_stats, out_dir):

    fig, canvas = get_fig_and_canvas(num_rows=3, figsize=(15, 30))

    axes = fig.add_subplot(211)
    if vcf_stats.gt_depths_by_gt_and_qual[HOM]:
        draw_int_boxplot(vcf_stats.gt_depths_by_gt_and_qual[HOM], axes=axes,
                      title='Genotype Qual. distribs vs Genotype Depth (HOMO)',
                         ylabel='Genotype Quality', xlabel='Genoype Depth')

        try:
            distrib = vcf_stats.gt_depths(HOM).calculate_distribution(min_=1,
                                                   max_=vcf_stats.dp_threshold)
        except RuntimeError:
            distrib = None
        if distrib is not None:
            axes2 = axes.twinx()
            draw_histogram_in_axes(distrib['counts'], distrib['bin_limits'],
                                   kind=LINE, axes=axes2,
                                   ylabel='Num. Genotypes')

    axes = fig.add_subplot(212)
    if vcf_stats.gt_depths_by_gt_and_qual[HET]:
        draw_int_boxplot(vcf_stats.gt_depths_by_gt_and_qual[HET], axes=axes,
                         title='Genotype Qual. distribs vs Genotype Depth (HET)',
                         ylabel='Genotype Quality', xlabel='Genoype Depth')

        try:
            distrib = vcf_stats.gt_depths(HET).calculate_distribution(min_=1,
                                                   max_=vcf_stats.dp_threshold)
        except RuntimeError:
            distrib = None

        if distrib is not None:
            axes2 = axes.twinx()
            draw_histogram_in_axes(distrib['counts'], distrib['bin_limits'],
                                   kind=LINE, axes=axes2,
                                   ylabel='Num. Genotypes')

    fhand = open(join(out_dir, 'gt_qual_distribs_vs_depth.png'), 'w')
    canvas.print_figure(fhand)
    fhand.flush()


def draw_het_by_snp(vcf_stats, out_dir):
    title = 'Heterozigosity Distribution'
    xlabel = '% heterozigote samples / called samples'
    ylabel = 'Num. SNVs'

    fig, canvas = get_fig_and_canvas(num_rows=2)

    distrib = vcf_stats.het_by_snp.calculate_distribution()
    axes = fig.add_subplot(211)
    draw_histogram_in_axes(distrib['counts'], distrib['bin_limits'],
                           title=title, xlabel=xlabel, ylabel=ylabel,
                           axes=axes)

    distrib = vcf_stats.inbreeding_by_snp.calculate_distribution()
    axes2 = fig.add_subplot(212)
    title = 'Inbreeding Coef. (F) Distribution'
    xlabel = '(1 - Hobs / H exp) * 100'
    draw_histogram_in_axes(distrib['counts'], distrib['bin_limits'],
                           axes=axes2, ylabel='Num. SNVs',
                           title=title, xlabel=xlabel)

    x_formatter = ScalarFormatter()
    x_formatter.set_powerlimits = (-3, 4)
    axes2.xaxis.set_major_formatter(x_formatter)
    for label in axes2.xaxis.get_ticklabels():
        label.set_rotation(90)

    fhand = open(join(out_dir, 'heterozigosity_by_snv_distrib.png'), 'w')
    canvas.print_figure(fhand)
    fhand.flush()


def draw_per_sample_stats(vcf_stats, out_dir):
    stats_fh = open(join(out_dir, 'stats_per_sample.txt'), 'w')
    header = "Sample\tNumHomREF\tNumHomALT\tNumHET\tNumMissing\tPercentMissing"
    stats_fh.write(header + '\n')
    stats_fh.write("-" * len(header) + '-------' + '\n')
    samples = []
    hets = []
    ref_gts = []
    alt_gts = []
    het_gts = []
    missing_gts = []
    missing_per_cent = []
    tot_snps = vcf_stats.called_snvs
    for sample in vcf_stats.samples:
        samples.append(sample)
        hets.append(vcf_stats.heterozigosity_for_sample(sample))
        gt_counts = vcf_stats.gt_types(sample=sample)
        ref_gt = gt_counts[HOM_REF]
        alt_gt = gt_counts[HOM_ALT]
        het_gt = gt_counts[HET]
        ref_gts.append(ref_gt)
        alt_gts.append(alt_gt)
        het_gts.append(het_gt)
        missing_gt = tot_snps - ref_gt - alt_gt - het_gt
        missing_gts.append(missing_gt)
        missing_per_cent.append(missing_gt / tot_snps * 100)
        values_to_txt = [sample, ref_gt, alt_gt, het_gt, missing_gt,
                         (missing_gt / tot_snps)]
        stats_fh.write("{}\t{}\t{}\t{}\t{}\t{:.2%}\n".format(*values_to_txt))

    total_missinpcent = sum(missing_gts) / (len(samples) * tot_snps)
    stats_fh.write('TOTAL\t{}\t{}\t{}\t{}\t{:.2%}\n'.format(sum(ref_gts),
                                                            sum(alt_gts),
                                                            sum(het_gts),
                                                            sum(missing_gts),
                                                            total_missinpcent))
    stats_fh.close()

    min_calls_for_pop_stats = vcf_stats.min_calls_for_pop_stats
    if len(samples) >= min_calls_for_pop_stats:
        num_plots = 3
    else:
        num_plots = 2

    height = num_plots * 4.2
    width = len(samples) / 5
    if width < 6:
        width = 6
    fig, canvas = get_fig_and_canvas(num_rows=num_plots,
                                     figsize=(width, height))
    plots_done = 1
    left = list(range(len(samples)))

    # het
    if len(samples) >= min_calls_for_pop_stats:
        height = hets
        axes = fig.add_subplot(num_plots, 1, plots_done)
        plots_done += 1
        axes.bar(left, height)
        axes.set_title('Heterocigosities per sample')
        axes.set_ylabel('Obs. Het.')
        axes.tick_params(axis='x', which='both', bottom='off', top='off',
                         labelbottom='off')

    # missing data
    height = missing_per_cent
    axes = fig.add_subplot(num_plots, 1, plots_done)
    plots_done += 1
    axes.bar(left, height)
    axes.set_title('Missing genotypes per sample')
    axes.set_ylabel('Missing genotypes (%)')
    axes.tick_params(axis='x', which='both', bottom='off', top='off',
                     labelbottom='off')

    # all
    axes = fig.add_subplot(num_plots, 1, plots_done)
    plots_done += 1
    height = ref_gts
    axes.bar(left, height, label='ref. homo.', color='blue')
    bottom = height

    height = het_gts
    axes.bar(left, height, bottom=bottom, label='het.', color='green')
    bottom = [a + b for a, b in zip(bottom, height)]

    height = alt_gts
    axes.bar(left, height, bottom=bottom, label='alt. homo.', color='red')
    bottom = [a + b for a, b in zip(bottom, height)]

    height = missing_gts
    axes.bar(left, height, bottom=bottom, label='missing', color='gray')

    axes.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
                ncol=4, mode='expand', borderaxespad=0.)

    axes.set_xticks([i + 0.5 for i in (range(len(samples)))])
    axes.set_xticklabels(samples, rotation='vertical')
    axes.set_xlabel('Sample')
    axes.set_ylabel('Num. SNPs')

    fhand = open(join(out_dir, 'stats_per_sample.png'), 'w')
    canvas.print_figure(fhand)


def draw_missing_data(vcf_stats, out_dir):
    fhand = open(join(out_dir, 'missing_data.png'), 'w')
    counters = []
    titles = []

    # distribution of number of called SNPs
    counters.append(vcf_stats.called_gts)
    titles.append('Num. SNPs called in the given number of samples')

    # distributions of SNPs read with a depth higher than x
    title = 'Num. SNPs read a depth >= than {} in the given number of samples'
    missing_calcs = OrderedDict()
    depths = sorted(vcf_stats.sample_dp_coincidence.viewkeys())
    for depth in depths:
        missing_for_depth = vcf_stats.sample_dp_coincidence[depth]
        counters.append(missing_for_depth)
        titles.append(title.format(depth))
        missing_calcs[depth] = missing_for_depth

    draw_histograms(counters, fhand=fhand, xlabel='Num. samples',
                    plots_per_chart=1, num_cols=1, ylabel='Num. SNPs',
                    titles=titles, kind=BAR)

    t_fhand = open(join(out_dir, 'missing_values_per_sample.txt'), 'w')
    t_fhand.write('MISSING VALUES\n--------------\n')

    n_samples = len(vcf_stats.samples)
    sample_numbers = range(0, n_samples + 1)
    t_fhand.write('dp/n_sm\t' + '\t'.join([str(i) for i in sample_numbers])
                  + '\n')

    for depth, counter in missing_calcs.items():
        line = [str(depth)]
        for n_sample in sample_numbers:
            line.append(str(counter[n_sample]))
        t_fhand.write('\t'.join(line) + '\n')
    t_fhand.close()


def main():
    # TODO something to look for SNP that are het in most samples

    parser = _setup_argparse()
    args = _parse_args(parser)
    out_dir = args['out_dir']
    gq_threshold = args['gq']
    in_vcf_fpath = args['in_fhand'].name
    min_samples = args['min_samples']

    vcf_stats = VcfStats(in_vcf_fpath, gq_threshold,
                         min_calls_for_pop_stats=min_samples)
    draw_missing_data(vcf_stats, out_dir)
    draw_per_sample_stats(vcf_stats, out_dir)
    draw_snv_depth(vcf_stats, out_dir)
    if len(vcf_stats.samples) >= vcf_stats.min_calls_for_pop_stats:
        draw_het_by_snp(vcf_stats, out_dir)
    draw_gt_depths(vcf_stats, out_dir)
    draw_quals_vs_depth(vcf_stats, out_dir)
    draw_gt_hist_vs_allele_counts(vcf_stats, out_dir)
    draw_snv_densities(vcf_stats, out_dir)
    draw_maf_and_mac(vcf_stats, out_dir)
    draw_gt_quals(vcf_stats, out_dir)
    draw_call_density(vcf_stats, out_dir)

if __name__ == '__main__':
    main()
