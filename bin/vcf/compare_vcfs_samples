#!/usr/bin/env python
import sys
import argparse
import json
import os.path


from vcf import Reader, Writer
from vcf.parser import _Filter, _Info
from vcf_crumbs.statistics import get_snpcaller_name, VCFcomparisons



def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Compare genoypes in the given samples from 2 vcf files'
    description += 'It compares each sample in one vcf with all in the other'
    parser = argparse.ArgumentParser(description=description)
    in_help = 'Indexed vcf file'
    parser.add_argument('input', help=in_help, type=argparse.FileType('rt'))
    parser.add_argument('-o', '--output', help='output vcf file',
                        type=argparse.FileType('wt'))
    parser.add_argument('-v', '--ref_vcf', required=True,
                        help='Vcf to compare with')
    in_samples_help = 'File with sample names for input vcf (all)'
    parser.add_argument('-s', '--vcf_samples_fpath', help=in_samples_help,
                        default=None)
    ref_samples_help = 'File with sample names for ref vcf (all)'
    parser.add_argument('-r', '--ref_samples_fpath', help=ref_samples_help,
                        default=None)
    return parser


def _read_samples(fpath):
    return [line.strip() for line in open(fpath)]


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input
    if parsed_args.output is not None:
        args['out_fhand'] = parsed_args.output
    else:
        args['out_fhand'] = sys.stdout
    args['ref_vcf_fpath'] = parsed_args.ref_vcf
    args['vcf_samples'] = _read_samples(parsed_args.vcf_samples_fpath)
    args['ref_samples'] = _read_samples(parsed_args.ref_samples_fpath)
    return args


def main():
    parser = _setup_argparse()
    args = _parse_args(parser)
    out_fhand = args['out_fhand']
    reader = Reader(args['in_fhand'])
    vcf_to_compare = VCFcomparisons(args['ref_vcf_fpath'],
                                    samples=args['ref_samples'])
    stats = vcf_to_compare.calculate_statistics(reader,
                                                samples=args['vcf_samples'])
    for stat, value in stats.items():
        out_fhand.write('{} : {}\n'.format(stat, str(value)))

if __name__ == '__main__':
    main()
