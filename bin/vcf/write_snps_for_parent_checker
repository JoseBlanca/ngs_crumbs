#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse

from crumbs.vcf.writers import DEF_AB_CODER_THRESHOLD, write_parent_checker


def _setup_argparse():
    description = 'It writes the snps in ParentChecker format'
    parser = argparse.ArgumentParser(description=description)

    in_help = 'Input VCF file (default STDIN)'
    parser.add_argument('input', help=in_help, nargs='?',
                        type=argparse.FileType('r'), default=sys.stdin)

    parser.add_argument('-a', '--parent_A_samples', action='append')

    parser.add_argument('-b', '--parent_B_samples', action='append')

    hlp = 'output ParentChecker file (default STDOUT)'
    parser.add_argument('-o', '--output', help=hlp,
                        type=argparse.FileType('wb'), default=sys.stdout)

    hlp = 'output physical map file'
    parser.add_argument('-m', '--phys_map_output', help=hlp,
                        type=argparse.FileType('wb'))

    hlp = 'Support threshold for AB recoding. (def. '
    hlp += str(DEF_AB_CODER_THRESHOLD) + ')'
    parser.add_argument('-t', '--AB_coding_threshold', help=hlp,
                        type=float, default=DEF_AB_CODER_THRESHOLD)

    hlp = 'Smoothing threshold.'
    parser.add_argument('-s', '--smooth_threshold', help=hlp, type=float)

    hlp = 'Recomb. threshold.'
    parser.add_argument('--recomb_threshold', help=hlp, type=float)

    hlp = 'output AB coding threshold histogram'
    parser.add_argument('-p', '--parent_hist', help=hlp,
                        type=argparse.FileType('w'))

    hlp = 'output Smooth threshold histogram'
    parser.add_argument('--smooth_hist', help=hlp,
                        type=argparse.FileType('w'))

    hlp = 'output AB coding log (default STDERR)'
    parser.add_argument('-l', '--log', help=hlp, type=argparse.FileType('w'),
                        default=sys.stderr)

    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input
    args['parents_a'] = parsed_args.parent_A_samples
    args['parents_b'] = parsed_args.parent_B_samples
    args['genos_fhand'] = parsed_args.output
    args['phys_map_fhand'] = parsed_args.phys_map_output
    args['coder_threshold'] = parsed_args.AB_coding_threshold
    args['parent_hist'] = parsed_args.parent_hist
    args['smooth_hist'] = parsed_args.smooth_hist
    args['log'] = parsed_args.log
    args['smooth_threshold'] = parsed_args.smooth_threshold
    args['recomb_threshold'] = parsed_args.recomb_threshold

    return args


def main():
    parser = _setup_argparse()
    args = _parse_args(parser)

    vcf_fhand = args['in_fhand']
    coder = write_parent_checker(vcf_fhand, args['parents_a'],
                                 args['parents_b'], args['genos_fhand'],
                                 phys_map_fhand=args['phys_map_fhand'],
                                 coder_threshold=args['coder_threshold'],
                                 smooth_threshold=args['smooth_threshold'],
                                 recomb_threshold=args['recomb_threshold'])

    if args['parent_hist'] is not None:
        coder.plot_parent_coding_hist(args['parent_hist'])

    if args['smooth_hist'] is not None:
        coder.plot_smooth_hist(args['smooth_hist'])

    if args['log'] is not None:
        coder.write_log(args['log'])


if __name__ == '__main__':
    main()
