#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse

from crumbs.vcf.filters import CallRateFilter, filter_snvs
from crumbs.vcf.utils.bin_utils import setup_filter_argparse, parse_filter_args


def _setup_argparse(**kwargs):
    'It prepares the command line argument parsing.'
    parser = setup_filter_argparse(**kwargs)

    parser.add_argument('-m', '--min_calls', type=int,
                        help='The SNV should have at least these genotypes')
    msg = 'The SNV should have at least this call/total genotypes'
    parser.add_argument('-r', '--min_call_rate', type=float, help=msg)
    parser.add_argument('-t', '--hist', help='Call rate histogram plot',
                        type=argparse.FileType('w'))
    return parser


def _parse_args(parser):
    filter_snvs_kwargs, filter_class_kwargs, parsed_args = parse_filter_args(parser)

    min_calls = parsed_args.min_calls
    min_call_rate = parsed_args.min_call_rate
    if min_calls is not None and min_call_rate is not None:
        msg = 'min_calls and min_call_rate can not be given simultaneously'
        parser.error(msg)
    elif min_calls is None and min_call_rate is None:
        msg = 'min_calls or min_call_rate has to be given'
        parser.error(msg)

    if min_calls is not None:
        filter_class_kwargs['min_calls'] = min_calls
    if min_call_rate is not None:
        filter_class_kwargs['min_call_rate'] = min_call_rate

    hist_fhand = parsed_args.hist

    return filter_snvs_kwargs, filter_class_kwargs, hist_fhand


def main():
    description = 'Removes the SNVs with too much missing data from a VCF file'
    parser = _setup_argparse(description=description)
    kwargs, filter_kwargs, hist_fhand = _parse_args(parser)

    filter_ = CallRateFilter(**filter_kwargs)
    kwargs['filters'] = [filter_]
    filter_snvs(**kwargs)

    if hist_fhand is not None:
        filter_.plot_hist(hist_fhand)

if __name__ == '__main__':
    main()
