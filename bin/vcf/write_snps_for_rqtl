#!/usr/bin/env python
import sys
import argparse

from crumbs.vcf.snv import VCFReader
from crumbs.vcf.writers import DEF_PHYS_TO_GENET_DIST, RQTLWriter


def _setup_argparse():
    description = 'It writes the snps in RQTL csvr format'
    parser = argparse.ArgumentParser(description=description)

    in_help = 'Input VCF file (default STDIN)'
    parser.add_argument('input', help=in_help, nargs='?',
                        type=argparse.FileType('r'), default=sys.stdin)

    hlp = 'output RQTL csvr file (default STDOUT)'
    parser.add_argument('-o', '--output', help=hlp,
                        type=argparse.FileType('wt'))

    hlp = 'physical to genetic distance ratio (DEF.'
    hlp += str(DEF_PHYS_TO_GENET_DIST) + '\n'
    parser.add_argument('-d', '--phys_to_genet', type=int,
                        default=DEF_PHYS_TO_GENET_DIST)

    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input

    if parsed_args.output is not None:
        args['out_fhand'] = parsed_args.output
    else:
        args['out_fhand'] = sys.stdout

    args['phys_to_genet'] = parsed_args.phys_to_genet
    return args


def main():
    parser = _setup_argparse()
    args = _parse_args(parser)

    reader = VCFReader(args['in_fhand'])
    writer = RQTLWriter(out_fhand=args['out_fhand'],
                        phys_to_genet_dist=args['phys_to_genet'])

    for snp in reader.parse_snvs():
        writer.write(snp)
    writer.close()

if __name__ == '__main__':
    main()
