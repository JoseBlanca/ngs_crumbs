#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

'It draws a histogram with the coverage of a bam file'

from __future__ import division

import argparse
import sys
from collections import Counter

from crumbs.utils.bin_utils import main, build_version_msg
from crumbs.bam.statistics import GenomeCoverages
from crumbs.plot import draw_histograms

COVERAGE_RANGE = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 75, 100)


def _setup_argparse():
    'It returns the argument parser'
    description = 'Draw coverage histogram'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        type=argparse.FileType('rt'), nargs='*')
    parser.add_argument('-o', '--outfile', dest='outfile', required=True,
                        help='Output file. File to write the graph',
                        type=argparse.FileType('wt'))
    parser.add_argument('-m', '--xlim_left', type=int,
                        help='Limit of the x axes in the left')
    parser.add_argument('-M', '--xlim_rigth', type=int,
                        help='Limit of the x axes in the rigth')
    parser.add_argument('-b', '--ylim_bottom', type=int,
                        help='Limit of the y axes in the bottom')
    parser.add_argument('-t', '--ylim_top', type=int,
                        help='Limit of the y axes in the top')
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    in_fhands = parsed_args.input
    out_fhand = getattr(parsed_args, 'outfile')
    xlim_left = parsed_args.xlim_left
    xlim_rigth = parsed_args.xlim_rigth
    ylimits = parsed_args.ylim_bottom, parsed_args.ylim_top
    return {'in_fhands': in_fhands, 'out_fhand': out_fhand, 'ylimits': ylimits,
            'xlim_left': xlim_left, 'xlim_rigth': xlim_rigth}


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)

    out_fhand = args['out_fhand']

    genome_coverages = GenomeCoverages(args['in_fhands'])
    samples = genome_coverages.samples

    titles = []
    counters = []
    xlabel = "Coverage"
    ylabel = "Num. Bases with this coverage"
    linestyles = []
    distrib_labels = []
    for sample in samples:
        sample_counters = genome_coverages.get_per_sample_mapq_counters(sample)
        title = 'Dist. of coverages for mapq >= than (see legend)'
        if sample is not None:
            title += ' for {}'.format(sample)

        for mapq_threshold in genome_coverages.mapqs_to_calculate:
            counters.append(sample_counters[mapq_threshold])
            titles.append(title)
            distrib_labels.append(mapq_threshold)
        linestyles += ['--', '-.', ':', '-']
    assert len(linestyles) == len(genome_coverages)
    num_cols = 2 if len(samples) > 1 else 1
    draw_histograms(counters, fhand=out_fhand, distrib_labels=distrib_labels,
                    xlabel=xlabel, ylabel=ylabel, titles=titles,
                    plots_per_chart=len(genome_coverages.mapqs_to_calculate),
                    xmin=args['xlim_left'], xmax=args['xlim_rigth'],
                    linestyles=linestyles, ylimits=args['ylimits'],
                    num_cols=num_cols)

    for sample in samples:
        write_coverage_stats(genome_coverages, sample, sys.stdout)


def write_coverage_stats(genome_coverages, sample, out_fhand):
    genome_coverages_sample = genome_coverages.get_per_sample_mapq_counters(sample)
    coverage_counter = genome_coverages_sample[0]
    stdout = 'Data for sample {}\n'.format(sample)
    stdout += '-------------------------------\n'
    stdout += 'Minimum coverage value: {}\n'.format(coverage_counter.min)
    stdout += 'Maximum coverage value: {}\n'.format(coverage_counter.max)
    stdout += 'Median value: {}\n'.format(coverage_counter.median)
    out_fhand.write(stdout)

    total_base_length = coverage_counter.count
    limit_count = Counter()
    for cov, count in coverage_counter.items():
        for coverage_limit in COVERAGE_RANGE:
            if cov >= coverage_limit:
                limit_count[coverage_limit] += count
    out_fhand.write('Positions with the given coverage:\n')
    out_fhand.write('----------------------------------\n')
    out_fhand.write('Coverture\tcount\t%porcentaje bases\t')
    out_fhand.write('coverture/positions cov>1\n')

    for limit in sorted(limit_count.keys()):
        percent_mapped = limit_count[limit] / total_base_length
        fraction_of_1 = limit_count[limit] / limit_count[1]
        out_fhand.write("{}\t{}\t{:.2%}\t{}\n".format(limit,
                                                      limit_count[limit],
                                                      percent_mapped,
                                                      fraction_of_1))
    out_fhand.write("\n")

if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
