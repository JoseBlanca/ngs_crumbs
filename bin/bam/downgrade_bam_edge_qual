#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from crumbs.utils.bin_utils import main, build_version_msg
from crumbs.bam.bam_tools import BAD_QUAL, downgrade_read_edges


def _setup_argparse():
    'It returns the argument parser'
    description = 'Calculate clamd in a bam file'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        type=argparse.FileType('rt'))
    parser.add_argument('-o', '--outfile', type=argparse.FileType('wt'),
                        help='Output file.')
    size_help = 'Size of the segmnet on each edge to downgrade'
    size_help += ' (default: %(default)s))'
    parser.add_argument('-s', '--edge_size', default=2, help=size_help,
                        type=int)
    down_help = 'Bad Quality value to use (default: %(default)s))'
    parser.add_argument('-q', '--bad_qual', default=BAD_QUAL, help=down_help,
                        type=int)
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input
    args['out_fhand'] = parsed_args.outfile
    args['edge_size'] = parsed_args.edge_size
    args['bad_qual'] = parsed_args.bad_qual

    return args


def run():
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhand = args['in_fhand']
    out_fhand = args['out_fhand']

    downgrade_read_edges(in_fhand.name, out_fhand.name, size=args['edge_size'],
                         bad_qual_value=args['bad_qual'])

if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
