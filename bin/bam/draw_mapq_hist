#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.


import argparse
import sys

from crumbs.utils.bin_utils import main, build_version_msg

from crumbs.bam.statistics import ReadStats
from crumbs.statistics import draw_histogram_ascii
from crumbs.plot import draw_histogram_in_fhand, BAR
from crumbs.utils.optional_modules import AlignmentFile


def _setup_argparse():
    'It returns the argument parser'
    description = 'Draw mapq histogram'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        type=argparse.FileType('rt'), nargs='*')
    parser.add_argument('-o', '--outfile', dest='outfile', required=True,
                        help='Output file',
                        type=argparse.FileType('wt'))
    parser.add_argument('-t', '--ascii_output', action='store_true',
                        help='Output an ascci ghrap')

    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    bam_fhands = parsed_args.input
    ascii_output = parsed_args.ascii_output
    out_fhand = getattr(parsed_args, 'outfile')

    return {'bam_fhands': bam_fhands, 'out_fhand': out_fhand,
            'ascii_output': ascii_output}


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)
    out_fhand = args['out_fhand']
    bams = [AlignmentFile(bam_fhand.name) for bam_fhand in args['bam_fhands']]
    read_stats = ReadStats(bams)
    mapq_counter = read_stats.mapqs

    if not args['ascii_output']:
        draw_histogram_in_fhand(mapq_counter, fhand=out_fhand,
                                title='Mapq distribution', kind=BAR,
                                ylabel="Num. Seqs", xlabel="Mapq")
    else:
        distrib = mapq_counter.calculate_distribution()
        out_fhand.write('\n')
        out_fhand.write('Distribution of coverages\n')
        out_fhand.write('-------------------------\n')
        out_fhand.write(draw_histogram_ascii(distrib['bin_limits'],
                                             distrib['counts']))


if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
