#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from crumbs.utils.bin_utils import main, build_version_msg
from crumbs.bam.statistics import ReferenceStats
from crumbs.settings import get_setting
from crumbs.utils.optional_modules import AlignmentFile


def _setup_argparse():
    'It returns the argument parser'
    description = 'Calculate statistics of the given files'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        nargs='*', type=argparse.FileType('rt'))
    parser.add_argument('-o', '--outfile', default=sys.stdout, dest='outfile',
                        help='Sequence output file (default STDOUT)',
                        type=argparse.FileType('wt'))
    parser.add_argument('--nbins', type=int,
                        default=get_setting('DEFAULT_N_BINS'),
                        help='number of bins for the distributions')
    parser.add_argument('--max_rpkm', type=float, help='max RPKM')
    n_abundant_refs = get_setting('DEFAULT_N_MOST_ABUNDANT_REFERENCES')
    hlp = 'Number of most represented references to print '
    hlp += '(default: %(default)s)'
    parser.add_argument('--most_abundant_refs', type=int,
                        default=n_abundant_refs, help=hlp)
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    in_fhands = parsed_args.input
    out_fhand = getattr(parsed_args, 'outfile')

    args = {'out_fhand': out_fhand, 'in_fhands': in_fhands,
            'max_rpkm': parsed_args.max_rpkm, 'bins': parsed_args.nbins,
            'n_abundant_refs': parsed_args.most_abundant_refs}
    return args, parsed_args


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)[0]

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    bams = [AlignmentFile(f.name) for f in in_fhands]
    stats = ReferenceStats(bams, bins=args['bins'],
                           n_most_abundant_refs=args['n_abundant_refs'])
    out_fhand.write(stats.write(max_rpkm=args['max_rpkm'],))
    out_fhand.close()

if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
