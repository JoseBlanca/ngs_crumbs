#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from crumbs.bam.flag import SAM_FLAG_TAGS
from crumbs.bam.bam_tools import filter_bam


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Filter bam reads by flag or mapping quality'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help="bam file with mapping result",
                        type=argparse.FileType('rt'))

    parser.add_argument('-o', '--bam_output', default='output.bam',
                        help='gff output file', type=argparse.FileType('wt'))
    parser.add_argument('--req_flag', action='append',
                        help='required SAM flag', choices=SAM_FLAG_TAGS)
    parser.add_argument('--filter_flag', action='append',
                        help='filtering SAM flag', choices=SAM_FLAG_TAGS)
    msg = 'Minimum mapq to use the read to count coverage'
    parser.add_argument('-p', '--min_mapq', help=msg, type=int)

    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['bam_fhand'] = parsed_args.input
    args['out_fhand'] = parsed_args.bam_output
    args['required_flags'] = parsed_args.req_flag
    args['filtering_flags'] = parsed_args.filter_flag
    args['min_mapq'] = parsed_args.min_mapq

    return args


def main():
    'the main part'
    parser = _setup_argparse()
    args = _parse_args(parser)

    filter_bam(in_fpath=args['bam_fhand'].name,
               out_fpath=args['out_fhand'].name,
               min_mapq=args['min_mapq'],
               required_flag_tags=args['required_flags'],
               filtering_flag_tags=args['filtering_flags'],
               regions=None)


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv.append('-h')
    main()
