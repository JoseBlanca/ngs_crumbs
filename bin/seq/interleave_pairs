#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
from crumbs.utils.bin_utils import main
from crumbs.seq.utils.bin_utils import (create_basic_argparse,
                                        parse_basic_args)
from crumbs.seq.seqio import read_seqs, write_seqs, flush_fhand
from crumbs.seq.pairs import interleave_pairs


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = ''
    parent = create_basic_argparse(description=description)
    parser = argparse.ArgumentParser(parents=[parent],
                                     conflict_handler='resolve')
    parser.add_argument('input', help='Sequence input files to process.',
                        default=sys.stdin, nargs=2,
                        type=argparse.FileType('rt'))
    parser.add_argument('-s', '--skip_checks', action='store_true',
                       help='Skip the pair read name correspondence checking.')
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_args(parser)
    args['skip_checks'] = parsed_args.skip_checks
    return args


def run():
    'The main function of the binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    seq1 = read_seqs([args['in_fhands'][0]])
    seq2 = read_seqs([args['in_fhands'][1]])

    seqs = interleave_pairs(seq1, seq2, skip_checks=args['skip_checks'])
    write_seqs(seqs, args['out_fhand'])
    flush_fhand(args['out_fhand'])

if __name__ == '__main__':
    sys.exit(main(run))
