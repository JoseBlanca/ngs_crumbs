#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.


import sys

from crumbs.utils.bin_utils import main
from crumbs.seq.utils.bin_utils import (parse_trimmer_args,
                                        create_trimmer_argparse)
from crumbs.seq.utils.seq_utils import process_seq_packets
from crumbs.utils.file_utils import flush_fhand
from crumbs.utils.tags import SEQITEM
from crumbs.seq.trim import TrimWithBlastShort, TrimOrMask, seq_to_trim_packets
from crumbs.seq.seqio import read_seq_packets, write_trim_packets
from crumbs.seq.seq import SeqWrapper, SeqItem


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It trims a fixed number of bases.'
    parser = create_trimmer_argparse(description=description)
    hlp = 'Oligonucleotide (from 18 to 40 pb) to remove (required)'
    parser.add_argument('-l', '--oligo', dest='oligos', help=hlp,
                        action='append', required=True)
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_trimmer_args(parser)

    oligos = []
    for oligo_index, str_seq in enumerate(parsed_args.oligos):
        name = 'oligo' + str(oligo_index)
        lines = ['>' + name + '\n', str_seq + '\n']
        oligos.append(SeqWrapper(SEQITEM, SeqItem(name, lines), 'fasta'))
    args['oligos'] = oligos

    return args


def run():
    'The main function'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']
    orphan_fhand = args['orphan_fhand']

    seq_packets = read_seq_packets(in_fhands)
    trim_packets = seq_to_trim_packets(seq_packets,
                                       group_paired_reads=args['paired_reads'])
    prep_trim = TrimWithBlastShort(oligos=args['oligos'])
    trim_or_mask = TrimOrMask(mask=args['mask'])

    trim_packets, workers = process_seq_packets(trim_packets,
                                                [prep_trim, trim_or_mask],
                                                processes=args['processes'])
    write_trim_packets(out_fhand, orphan_fhand, trim_packets,
                       args['out_format'], workers=workers)

    flush_fhand(out_fhand)
    if orphan_fhand is not None:
        orphan_fhand.flush()

if __name__ == '__main__':
    sys.exit(main(run))
