#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.


import argparse
import sys

from crumbs.utils.tags import (GUESS_FORMAT, OUTFILE, SEQRECORD, SEQITEM)
from crumbs.utils.file_utils import (wrap_in_buffered_reader,
                                     uncompress_if_required)
from crumbs.utils.bin_utils import main, build_version_msg
from crumbs.seq.utils.file_formats import get_format, set_format
from crumbs.seq.seqio import read_seqs
from crumbs.statistics import count_seqs


def _setup_argparse():
    'It returns the argument parser'
    description = 'Counts the number of sequences and the total length'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', default=sys.stdin, nargs='*',
                        help='Sequence input files to process (default STDIN)',
                        type=argparse.FileType('rt'))
    parser.add_argument('-t', '--in_format', default=GUESS_FORMAT,
                       help='Format of the input files (default: %(default)s)')
    parser.add_argument('-o', '--outfile', default=sys.stdout, dest=OUTFILE,
                        help='Sequence output file (default STDOUT)',
                        type=argparse.FileType('wt'))
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    # we have to wrap the file in a BufferedReader to allow peeking into stdin
    wrapped_fhands = []
    # if input is stdin it will be a fhand not a list of fhands.
    # we have to convert to a list
    in_fhands = parsed_args.input
    if not isinstance(in_fhands, list):
        in_fhands = [in_fhands]
    for fhand in in_fhands:
        fhand = wrap_in_buffered_reader(fhand)
        fhand = uncompress_if_required(fhand)
        wrapped_fhands.append(fhand)

    in_format = parsed_args.in_format
    if in_format == GUESS_FORMAT:
        for wrapped_fhand in wrapped_fhands:
            get_format(wrapped_fhand)
    else:
        for wrapped_fhand in wrapped_fhands:
            set_format(wrapped_fhand, in_format)

    out_fhand = getattr(parsed_args, OUTFILE)

    args = {'out_fhand': out_fhand, 'in_fhands': wrapped_fhands,
            'original_in_fhands': in_fhands}
    return args, parsed_args


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)[0]

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    if 'fasta' in get_format(in_fhands[0]):
        prefered_seq_classes = [SEQITEM, SEQRECORD]
    else:
        prefered_seq_classes = [SEQRECORD]
    seqs = read_seqs(in_fhands, prefered_seq_classes=prefered_seq_classes)
    counts = count_seqs(seqs)
    result = '{num_seqs:d} {total_length:d}\n'.format(**counts)
    out_fhand.write(result)
    out_fhand.close()

if __name__ == '__main__':
    #sys.argv.append('-h')
    sys.exit(main(run))
