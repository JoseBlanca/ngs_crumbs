#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys

from crumbs.utils.bin_utils import main
from crumbs.seq.utils.bin_utils import (parse_basic_parallel_args,
                                        create_basic_parallel_argparse)
from crumbs.seq.utils.seq_utils import process_seq_packets, ChangeCase
from crumbs.utils.file_utils import flush_fhand
from crumbs.utils.tags import UPPERCASE, LOWERCASE, SWAPCASE
from crumbs.seq.seqio import read_seq_packets, write_seq_packets


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It changes the case of the sequences.'
    parser = create_basic_parallel_argparse(description=description)

    parser.add_argument('-a', '--action', dest='action', required=True,
                        help='Change to perform in the case (required)',
                        type=str, choices=(UPPERCASE, LOWERCASE, SWAPCASE))
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_parallel_args(parser)
    args['action'] = parsed_args.action
    return args


def run():
    'The main function of the binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    seq_packets = read_seq_packets(in_fhands)
    change_case = ChangeCase(action=args['action'])
    seq_packets, workers = process_seq_packets(seq_packets, [change_case],
                                               processes=args['processes'])
    write_seq_packets(out_fhand, seq_packets, args['out_format'],
                      workers=workers)
    flush_fhand(out_fhand)

if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
