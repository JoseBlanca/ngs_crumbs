#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of ngs_crumbs.
# ngs_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# ngs_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.


import sys
import argparse

from crumbs.utils.bin_utils import main, build_version_msg
from crumbs.utils.file_utils import (wrap_in_buffered_reader,
                                     uncompress_if_required)
from crumbs.seq.seqio import get_format


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It guesses the format of the sequence input file.'
    epilog = 'This program ignores the possibility of the old solexa fastq '
    epilog += 'format.'
    hlp = 'Sequence input file to process (default STDIN)'
    parser = argparse.ArgumentParser(description=description, epilog=epilog)
    parser.add_argument('input', help=hlp, default=sys.stdin, nargs='?',
                        type=argparse.FileType('r'))
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    in_fhand = parsed_args.input

    fhand = wrap_in_buffered_reader(in_fhand)
    fhand = uncompress_if_required(fhand)

    args = {'in_fhand': fhand, 'original_in_fhand': in_fhand}
    return args


def guess_seq_format():
    'It guesses the file format of a file'

    parser = _setup_argparse()
    args = _parse_args(parser)
    fmt = get_format(args['in_fhand'])
    sys.stdout.write(fmt + '\n')

if __name__ == '__main__':
    sys.exit(main(guess_seq_format))
